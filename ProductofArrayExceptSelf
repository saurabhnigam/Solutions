/***
238. Product of Array Except Self

Share
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
**/


class Solution {
    public int[] productExceptSelf(int[] a) {
    
    /***
    For every a[i] get product of prefix numbers & suffix numbers
    we are storing product of prefix nos in prefix[i-1] & suffix in suffix[i+1]
    **/
        int[] suffix = new int[a.length];
        int[] prefix = new int[a.length];
        int[] out = new int[a.length];
        int sprev =1;
        for(int i= a.length-1; i>=0;i--){
            sprev= sprev*a[i];
            suffix[i] = sprev;
        }
        
        sprev =1;
        for(int i=0;i<a.length;i++){
          sprev = sprev*a[i];
          prefix[i]  = sprev ;
        }
        
        for(int i=0;i<a.length;i++){
            int prev = i>0?(prefix[i-1]):1;
            int next= i<(a.length-1)?(suffix[i+1]):1;
            out[i] = prev*next;
        }
        
        return out;
        
    }
}
